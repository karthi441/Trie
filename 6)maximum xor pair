struct Node{
    Node* link[2];
    bool isContain(int bit){
        return (link[bit]!=NULL);
    }
    void put(int bit,Node* node){
        link[bit]= node;
    }
    Node* get(int bit){
        return link[bit];
    }

};

        Node * root ;
    void Insert(int num){
       Node* node=root;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(!node->isContain(bit)){
                node->put(bit,new Node());
            }
            node =node->get(bit);
        }
    }
    int getmax(int num){
         Node* node=root;
        int maxi=0;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(node->isContain(1-bit)){
                maxi=maxi|(1<<i);
                node =node->get(1-bit);
            }else{
                node =node->get(bit);
            }
        }
        return maxi;
    }
    

class Solution
{
    public:
    int max_xor(int a[] , int n)
    {   root=new Node();
       
        for(int i=0;i<n;i++){
            Insert(a[i]);
        }
        int ans=0;
        for(int i=0;i<n;i++){
            ans=max(ans,getmax(a[i]));
        }
        return ans;
    }
    
};
