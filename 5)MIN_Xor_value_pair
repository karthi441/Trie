//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function Template for C++

struct Node{
    Node* link[2];
    bool isContain(int bit){
        return (link[bit]!=NULL);
    }
    void put(int bit,Node* node){
        link[bit]= node;
    }
    Node* get(int bit){
        return link[bit];
    }

};

        Node * root ;
    void Insert(int num){
       Node* node=root;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(!node->isContain(bit)){
                node->put(bit,new Node());
            }
            node =node->get(bit);
        }
    }
    int getmin(int num){
         Node* node=root;
        int mini=0;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(node->isContain(bit)){
                
                node =node->get(bit);
            }else{
                mini=mini|(1<<i);
                node =node->get(1-bit);
            }
        }
        return mini;
    }
    

class Solution
{
    public:
    int minxorpair( int n,int a[])
    {   root=new Node();
       Insert(a[0]);
        
        int ans=INT_MAX;
        for(int i=1;i<n;i++){
            ans=min(ans,getmin(a[i]));
            Insert(a[i]);
        }
        return ans;
    }
    
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, X;
        cin >> N;
        int arr[N];
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }

        Solution ob;
        cout << ob.minxorpair(N, arr) << endl;
    }
    return 0; 
} 

// } Driver Code Ends
