#include <bits/stdc++.h>
using namespace std;
 int stringCompare(string str1, string str2)
    {
  
        int l1 = str1.length();
        int l2 = str2.length();
        int lmin = min(l1, l2);
  
        for (int i = 0; i < lmin; i++) {
            int str1_ch = str1[i];
            int str2_ch = str2[i];
  
            if (str1_ch != str2_ch) {
                return str1_ch - str2_ch;
            }
        }
  
        // Edge case for strings like
        // String 1="Geeks" and String 2="Geeksforgeeks"
        if (l1 != l2) {
            return l1 - l2;
        }
  
        // If none of the above conditions is true,
        // it implies both the strings are equal
        else {
            return 0;
        }
    }
  
class Node{
  Node * arr[26];
  bool res=false;
    public:
  bool containsKey(char ch){
      return arr[ch-'a']!=NULL;
  }
   void put( char ch,Node * nn){
         arr[ch-'a']=nn;
   }
    Node * getnext(char ch){
        return arr[ch-'a'];
    }
    void setend(){
        res=true;
    }
    bool isend(){
        return res;
    }
};

string completeString(int n, vector<string> &a){
    string ans="";
    Node * root=new Node();
    Node * temp;
    for(int i=0;i<n;i++){
        string s=a[i];
        temp=root;
        for(int j=0;j<s.length();j++){
            char ch=s[j];
            if(!temp->containsKey(ch)){
                temp->put(ch,new Node());
            }
            temp=temp->getnext(ch);
            }
        temp->setend();
    }
    for(int i=0;i<n;i++){
        string s=a[i];
        temp=root;
        int isit=0;
        for(int j=0;j<s.length();j++){
            char ch=s[j];
            if(!temp->containsKey(ch)){
                isit=1;
                break;
            }
            temp=temp->getnext(ch);
            if(temp->isend()==false){
                isit=1;
                break;
            }
        }
        if(isit==0){
            if(ans.length()<s.length()){
                ans=s;
            }
            if(ans.length()==s.length() && stringCompare(s,ans)<0){
                ans=s;
            }
        }
    }
    return ans;
}
int main() {
    int n=  4;
    vector<string> a{"ab","abc","","bp"};
    cout<<completeString(n,a);
}
